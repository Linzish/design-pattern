package me.unc.designpattern.behavior.interpreter;

import me.unc.designpattern.behavior.interpreter.example.Client;

/**
 * 解释器模式（相对复杂，慎用）
 *
 * 问题引入：四则运算问题
 * 通过解释器模式来实现四则运算，如计算 a+b-c 的值，具体要求
 * 1) 先输入表达式的形式，比如 a+b+c-d+e, 要求表达式的字母不能重复
 * 2) 在分别输入 a ,b, c, d, e 的值
 *
 * 传统方案解决四则运算问题分析
 * 1) 编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果
 * 2) 问题分析：如果加入新的运算符，比如 * / ( 等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱， 不够清晰.
 * 3) 解决方案：可以考虑使用解释器模式， 即： 表达式 -> 解释器(可以有多种) -> 结 果
 *
 * 解释器模式基本介绍
 * 1) 在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法 分析树，
 *  最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器
 * 2) 解释器模式（Interpreter Pattern）：是指给定一个语言(表达式)，定义它的文法的一种表示，并定义一个解释器，
 *  使用该解释器来解释语言中的句子(表达式)
 * 3) 应用场景
 *  -应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树
 *  -一些重复出现的问题可以用一种简单的语言来表达
 *  -一个简单语法需要解释的场景
 * 4) 这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等
 *
 * 角色及职责
 * 1) Context: 是环境角色,含有解释器之外的全局信息.
 * 2) AbstractExpression: 抽象表达式， 声明一个抽象的解释操作,这个方法为抽象语法树中所有的节点所共享
 * 3) TerminalExpression: 为终结符表达式, 实现与文法中的终结符相关的解释操作
 * 4) NonTermialExpression: 为非终结符表达式，为文法中的非终结符实现解释操作.
 * 5) 说明： 输入 Context he TerminalExpression 信息通过 Client 输入即可
 *
 * 解释器模式来实现四则
 * @see Client
 *
 * 解释器模式在 Spring 框架应用
 * 1) Spring 框架中 SpelExpressionParser 就使用到解释器模式
 *
 * 解释器模式的注意事项和细节
 * 1) 当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，
 *  让程序具有良好的扩展性
 * 2) 应用场景：编译器、运算表达式计算、正则表达式、机器人等
 * 3) 使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，
 *  将会导致调试非常复杂、效率可能降低.
 *
 */
public class InterpreterMain {
}
