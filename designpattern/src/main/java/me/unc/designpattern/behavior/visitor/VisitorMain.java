package me.unc.designpattern.behavior.visitor;

import me.unc.designpattern.behavior.visitor.example.Client;

/**
 * 访问者模式
 *
 * 问题引入：测评系统的需求
 * 1) 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价(评价 有不 同的种类，比如 成功、失败 等)
 *
 * 传统方式的问题分析
 * 1) 如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 ocp 原则， 不利于维护
 * 2) 扩展性不好，比如 增加了 新的人员类型，或者管理方法，都不好做
 * 3) 引出我们会使用新的设计模式 – 访问者模式
 *
 * 访问者模式基本介绍
 * 1) 访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构
 *  的前提下定义作用于这些元素的新的操作。
 * 2) 主要将数据结构与数据操作分离，解决 数据结构和操作耦合性问题
 * 3) 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口
 * 4) 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时
 *  需要避免让这些操作"污染"这些对象的类，可以选用访问者模式解决
 *
 * 角色及职责
 * 1) Visitor 是抽象访问者，为该对象结构中的 ConcreteElement 的每一个类声明一个 visit 操作
 * 2) ConcreteVisitor ：是一个具体的访问值 实现每个有 Visitor 声明的操作，是每个操作实现的部分.
 * 3) ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素
 * 4) Element 定义一个 accept 方法，接收一个访问者对象
 * 5) ConcreteElement 为具体元素，实现了 accept 方法
 *
 * 访问者模式应用实例 （双分派问题）
 * @see Client
 *
 * 访问者模式的注意事项和细节
 *  优点
 * 1) 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高
 * 2) 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统
 *  缺点
 * 1) 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样 造成了具体元素变更比较困难
 * 2) 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素
 * 3) 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的.
 *
 */
public class VisitorMain {
}
